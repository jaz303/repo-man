#!/usr/bin/env ruby

module RepoMan
  
  class ApacheConfigGenerator
    
    def initialize(path)
      @path = path
    end
    
    def roots
      @roots ||= RootDetector.new(@path).roots
    end
    
    def to_httpd_conf
      out = ""
      roots.each do |r|
        
        out << "<Location #{normalize_location(r)}>\n"
        out << "  DAV svn\n"
        out << "  SVNParentPath #{r}\n"
        
        if access_file = find_access_file(r)
          out << "  AuthzSVNAccessFile #{access_file}\n"
        end
          
        out << "  Require valid-user\n"
        out << "  Allow from all\n"
        out << "  Satisfy all\n"
        out << "</Location>\n\n"
        
      end
      out
    end
    
    private
    
      def normalize_location(r)
        r.gsub(/^#{Regexp.quote(@path)}/, '') + '/'
      end
      
      def find_access_file(root)
        while true
          access_file = File.join(root, 'svn_access')
          return access_file if File.exists?(access_file)
          return nil if root.length <= @path.length 
          root = File.dirname(root)
        end
      end
    
  end

  # Locates all SVN roots under a given path
  # root = directory containing one or more repos
  class RootDetector
    def initialize(path)
      @path = path
    end
    
    def roots
      @roots = []
      find_roots(@path)
      @roots
    end
    
    private
      
      def find_roots(path)
        try = Dir["#{path}/*"].reject { |f| !File.directory?(f) }
        if try.any? { |f| is_repo?(f) }
          @roots << path
        else
          try.each { |d| find_roots(d) }
        end
      end
      
      def is_repo?(path)
        %w(conf dav db hooks locks).all? { |d| File.directory?(File.join(path, d)) }
      end
    
  end
end

if ARGV.length != 1
  puts "Usage: repo-man path"
  exit
end

path = File.expand_path(ARGV[0])

if !File.directory?(path)
  puts "Error: #{path} is not a directory"
  exit 1
end

puts RepoMan::ApacheConfigGenerator.new(path).to_httpd_conf
